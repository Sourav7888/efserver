name: Tests

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpwd
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
  

    steps:
    steps:
      

      - uses: actions/checkout@v2

      - name: rabbitmq  
        uses: getong/rabbitmq-action@v1.2
        with:
          rabbitmq version: '3.8.2-management-alpine'
          host port: 5672

      - name: Setup python3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        working-directory: .
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create .env
        working-directory: .
        run: |
          touch .env
          echo ENV_TYPE=DEVELOPMENT >> .env
          echo DEVELOPMENT_SECRET_KEY=xyz123 >> .env
          echo DEVELOPMENT_DATABASE_NAME=postgres >> .env
          echo DEVELOPMENT_DATABASE_USER=testuser >> .env
          echo DEVELOPMENT_DATABASE_HOST=localhost >> .env
          echo DEVELOPMENT_DATABASE_PASSWORD=testpwd >> .env
          echo DEVELOPMENT_AWS_ACCESS_KEY_ID=${{ secrets.DEVELOPMENT_AWS_ACCESS_KEY_ID }} >> .env
          echo DEVELOPMENT_AWS_SECRET_ACCESS_KEY=${{ secrets.DEVELOPMENT_AWS_SECRET_ACCESS_KEY }} >> .env
          echo DEVELOPMENT_AWS_STORAGE_BUCKET_NAME=${{ secrets.DEVELOPMENT_AWS_STORAGE_BUCKET_NAME }} >> .env

      - name: Run Celery
        working-directory: .
        run: |
          celery -A server worker --loglevel=info --concurrency=4 --max-tasks-per-child=1 --without-gossip --without-mingle -l INFO

      - name: Run test & Generate report
        working-directory: .
        run: |
          coverage run ./manage.py test  --noinput  
          coverage xml

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Upload to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          path: ./server/coverage.xml
          name: codecov-umbrella
